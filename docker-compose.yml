version: "3.3"
services:

  traefik:
    command: --api --docker 
    image: traefik:v1.6.4-alpine
    ports:
      - "80:80"
      - "8088:8080"
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock

  rabbit-mq:
    hostname: my-rabbit # https://hub.docker.com/_/rabbitmq/
    image: rabbitmq:3.7.6-management-alpine
    ports:
      - "8080:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  redis:
    image: redis:4.0.9-alpine
    volumes:
      - redis-data:/data

  db:
    image: mongo:3.6.5-jessie
    volumes:
      - mongodb-data:/data/db

  bar:
    build:
      context: "$PWD"
      dockerfile: Dockerfile
    command: >
      /bin/bash -c "
        sleep 10s
        cd src/bar/lib/bar && python bar.py
      "
    depends_on:
      - rabbit-mq
    environment:
      RABBITMQ_HOST: rabbit-mq
    links:
      - rabbit-mq
    restart: on-failure
    volumes:
      - type: bind
        source: "$PWD"
        target: /app

  foo:
    build:
      context: "$PWD"
      dockerfile: Dockerfile
    command: >
      /bin/bash -c "
        sleep 10s
        cd src/foo/lib/foo && python foo.py
      "
    depends_on:
      - rabbit-mq
      - redis
      - db
    environment:
      PYTHONBUFFERED: 0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbit-mq
      MONGO_HOST: db
      MONGO_PORT: 27017
    labels:
      - "traefik.frontend.rule=Host:foo.docker.localhost"
    links:
      - rabbit-mq
      - redis
      - db
    ports:
      - "5000:5000"
    restart: on-failure
    volumes:
      - type: bind
        source: "$PWD"
        target: /app

volumes:
  mongodb-data:
  rabbitmq-data:
  redis-data:
